package day02;

/*
5、位运算符
左移：<<
	左移几位，相当于乘以2的几次方
	如果左移的位数，超过当前数据类型的总位数，需要先减去总位数
	例如：3 << 34等价于 3<<2  3*2的2次=3*4=12
	byte,short类型在运算时会自动提升为int.
	
右移：>>
	右移几位，相当于除以2的几次方，结果会向下取整
	同样右移的位数，超过当前数据类型的总位数，需要先减去总位数
	byte,short类型在运算时会自动提升为int.
	
无符号右移：>>>
	无论最高位是1还是0，右移时左边都是补0
	对于正数来说，和右移是一样的，
	对于负数来说，结果会不同
	
按位与：&
	对应位，
	1 & 1 结果还是1
	1 & 0 结果是0
	0 & 1 结果是0
	0 & 0 结果是0
按位或：|
	对应位，
	1 | 1 结果是1
	1 | 0 结果是1
	0 | 1 结果是1
	0 | 0 结果是0
按位异或：^
	对应位，
	1 ^ 1 结果是0
	1 ^ 0 结果是1
	0 ^ 1 结果是1
	0 ^ 0 结果是0
按位取反：~
	~1是0
	~0是1

*/
public class BitOperator{
	public static void main(String[] args){
		System.out.println(3 << 4);//48
		/*
		3的二进制补码： 00000000 00000000 00000000 00000011
		3<<4		 :  00000000 00000000 00000000 00110000
		
		3 * 2的4次 = 3*16=48
		*/
		
		System.out.println(-3 << 4);//48
		/*
		-3的二进制原码： 10000000 00000000 00000000 00000011
		-3的二进制反码： 11111111 11111111 11111111 11111100
		-3的二进制补码： 11111111 11111111 11111111 11111101
		-3<<4		 :   11111111 11111111 11111111 11010000 补码
						 11111111 11111111 11111111 11001111 反码
						 10000000 00000000 00000000 00110000 原码 -48
						 
						 -3 * 2的4次 = -3*16=-48
		*/
		
		System.out.println(3 << 34);//12
		
		byte b = 3;
		System.out.println(b << 7);//384
		
		
		System.out.println(83 >> 4);//5
		//83 / 2的4次 = 83/16 = 5 整数和整数相除，结果还是整数
		/*
		83的二进制原码：00000000 00000000 00000000 01010011
		83 >> 4：		00000000 00000000 00000000 00000101
		*/
		
		System.out.println(-83 >> 4);//-6
		/*
		-83的二进制原码：10000000 00000000 00000000 01010011
		-83的二进制反码：11111111 11111111 11111111 10101100
		-83的二进制补码：11111111 11111111 11111111 10101101
		
		-83 >> 4		 111111111111 11111111 11111111 1010 补码
						 111111111111 11111111 11111111 1001 反码
						 100000000000 00000000 00000000 0110 原码
		*/
		
		System.out.println(-83 >>> 4);//268435450
		/*
		-83的二进制原码：10000000 00000000 00000000 01010011
		-83的二进制反码：11111111 11111111 11111111 10101100
		-83的二进制补码：11111111 11111111 11111111 10101101  补码
		-83 >>> 4		 000011111111 11111111 11111111 1010
		*/
		
		System.out.println(3 & 4);//0
		/*
		3的二进制  24个0 00000011
		4的二进制  24个0 00000100
		3 & 4      24个0 00000000
		*/
		
		System.out.println(3 | 4);//7
		/*
		3的二进制  24个0 00000011
		4的二进制  24个0 00000100
		3 | 4      24个0 00000111
		*/
		
		System.out.println(3 ^ 4);//7
		/*
		3的二进制  24个0 00000011
		4的二进制  24个0 00000100
		3 ^ 4      24个0 00000111
		*/
		
		System.out.println(6 ^ 4);//2
		/*
		6的二进制  24个0 00000110
		4的二进制  24个0 00000100
		6 ^ 4      24个0 00000010
		*/
		
		System.out.println(~4);
		/*
		4的二进制  24个0 00000100
		~4         24个1 11111011 补码
		~4         24个1 11111010 反码
		~4       1 23个0 00000101 原码  -5
		*/
	}
}